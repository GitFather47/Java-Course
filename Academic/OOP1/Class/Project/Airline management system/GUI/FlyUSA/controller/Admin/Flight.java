package FlyUSA.controller.Admin;import FlyUSA.controller.User.Passenger;import FlyUSA.controller.IFeature;import javax.swing.*;import java.awt.*;import java.awt.event.*;import java.io.FileWriter;import java.io.FileReader;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.IOException;import java.io.File;import javax.swing.JTable;import javax.swing.JScrollPane;import javax.swing.JFrame;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableCellRenderer; public class Flight extends Passenger implements IFeature {    private String flightNo;    private String pilotName;    private String arrivalTime;    private String departureTime;    private String from;    private String to;    private String flightClass;    private String passengerName;    public String[][] seat;    private JFrame frameIn,frame;    private JButton backButton;    public  void setPassengerName(String passengerName){        this.passengerName=passengerName;    }    public  String  getPassengerName(String passengerName){        return passengerName;    }private DefaultTableModel parseFlightData() {    DefaultTableModel model = new DefaultTableModel();    model.addColumn("Flight No");    model.addColumn("Pilot Name");    model.addColumn("Arrival Time");    model.addColumn("Departure Time");    model.addColumn("Flying From");    model.addColumn("Flying To");    model.addColumn("Class");    String filePath ="FlyUSA/controller/Admin/flights.txt";                  try {            FileReader reader = new FileReader(filePath);            BufferedReader br = new BufferedReader(reader);            String line;// To store flight information            String[] flightInfo = new String[8];            while ((line = br.readLine()) != null) {                if (line.equals("-----------------------------")) {                    model.addRow(flightInfo); // Add the data to the table                    flightInfo = new String[7]; // Reset the flightInfo array                } else {                    String[] parts = line.split(": ");                    if (parts.length == 2) {                        String columnName = parts[0];                        String columnValue = parts[1];                        switch (columnName) {                            case "Flight No":                                flightInfo[0] = columnValue;                                break;                            case "Pilot Name":                                flightInfo[1] = columnValue;                                break;                            case "Arrival Time":                                flightInfo[2] = columnValue;                                break;                            case "Departure Time":                                flightInfo[3] = columnValue;                                break;                            case "Flying From":                                flightInfo[4] = columnValue;                                break;                            case "Flying To":                                flightInfo[5] = columnValue;                                break;                            case "Class":                                flightInfo[6] = columnValue;                                break;                        }                    }                }            }            br.close();            reader.close();        } catch (IOException e) {            e.printStackTrace();        }        return model;}    public void saveFlightInfoToFile() {        FileWriter writer;         String filePath ="FlyUSA/controller/Admin/flights.txt";        try {            writer = new FileWriter(filePath, true); // Append mode            writer.write("Flight No: " + flightNo + "\n");            writer.write("Pilot Name: " + pilotName + "\n");            writer.write("Arrival Time: " + arrivalTime + "\n");            writer.write("Departure Time: " + departureTime + "\n");            writer.write("Flying From: " + from + "\n");            writer.write("Flying To: " + to + "\n");            writer.write("Class: " + flightClass + "\n");            writer.write("-----------------------------\n");            writer.close();            JOptionPane.showMessageDialog(null, "Flight information saved to file successfully!");        } catch (IOException io) {            System.out.println("An error occurred while saving flight information to file.");            io.printStackTrace();//To know the erronous line        }    }    public void showFlightInfoToFile() {    DefaultTableModel model = parseFlightData();    JTable table = new JTable(model);    JScrollPane scrollPane = new JScrollPane(table);     // Assuming scrollPane is your JScrollPane containing the JTable        frame = new JFrame("Flight Information");    frame.setSize(1024,800);    frame.setLocationRelativeTo(null);    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    table.setBackground(new Color(144,238,144));    scrollPane.getViewport().setBackground(new Color(176,196,222));    frame.setLayout(new BorderLayout());    frame.add(scrollPane, BorderLayout.CENTER);        backButton = new JButton("Back");    backButton.addActionListener(this);    JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));    buttonPanel.add(backButton);    frame.add(buttonPanel, BorderLayout.SOUTH);    JButton removeButton = new JButton("Remove");    removeButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {            int selectedRow = table.getSelectedRow();            if (selectedRow != -1) {                // Remove the selected row from the table model                model.removeRow(selectedRow);                // Update the flights.txt file with the new data                updateFlightFile(model);                JOptionPane.showMessageDialog(null, "Selected flight removed successfully!");            } else {                JOptionPane.showMessageDialog(null, "Please select a row to remove.");            }        }    });    buttonPanel.add(removeButton);    frame.setLocationRelativeTo(null);    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    frame.pack();    frame.setVisible(true);    }private void updateFlightFile(DefaultTableModel model) {     String filePath ="FlyUSA/controller/Admin/flights.txt";    try {        FileWriter writer = new FileWriter(filePath);        for (int row = 0; row < model.getRowCount(); row++) {            for (int col = 0; col < model.getColumnCount(); col++) {                String columnName = model.getColumnName(col);                Object columnValueObj = model.getValueAt(row, col);                String columnValue = columnValueObj != null ? columnValueObj.toString() : "";                writer.write(columnName + ": " + columnValue + "\n");            }            writer.write("-----------------------------\n");        }        writer.close();    } catch (IOException io) {        io.printStackTrace();    }}        public void flightInfo() {        frameIn= new JFrame("Flight Information");        JPanel panelIn = new JPanel();        panelIn.setBackground(new Color(176,196,222));        frameIn = new JFrame(); // Initialize the frameAd member variable        frameIn.setTitle("Flight Information");        frameIn.setSize(350, 370);        frameIn.setLocationRelativeTo(null);        frameIn.setResizable(false);        frameIn.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);        frameIn.add(panelIn);        panelIn.setLayout(null);        JLabel flightNoLabel = new JLabel("Flight No: ");        flightNoLabel.setBounds(10, 20, 80, 25);                panelIn.add(flightNoLabel);        JTextField flightNoField = new JTextField();                flightNoField.setBounds(100, 20, 165, 25);        panelIn.add(flightNoField);        JLabel pilotNameLabel = new JLabel("Pilot Name: ");        pilotNameLabel.setBounds(10, 50, 80, 25);        panelIn.add(pilotNameLabel);        JTextField pilotNameField = new JTextField();        pilotNameField.setBounds(100, 50, 165, 25);        panelIn.add(pilotNameField);        JLabel arrivalTimeLabel = new JLabel("Arrival Time: ");        arrivalTimeLabel.setBounds(10, 80, 80, 25);        panelIn.add(arrivalTimeLabel);        JTextField arrivalTimeField = new JTextField();        arrivalTimeField.setBounds(100, 80, 165, 25);        panelIn.add(arrivalTimeField);        JLabel departureTimeLabel = new JLabel("Departure Time:");        departureTimeLabel.setBounds(10, 110, 130, 25);        panelIn.add(departureTimeLabel);        JTextField departureTimeField = new JTextField();        departureTimeField.setBounds(100, 110, 165, 25);        panelIn.add(departureTimeField);        JLabel fromLabel = new JLabel("Flying From: ");        fromLabel.setBounds(10, 140, 80, 25);        panelIn.add(fromLabel);        JTextField fromField = new JTextField();        fromField.setBounds(100, 140, 165, 25);        panelIn.add(fromField);        JLabel toLabel = new JLabel("Flying to: ");        toLabel.setBounds(10, 170, 80, 25);        panelIn.add(toLabel);        JTextField toField = new JTextField();        toField.setBounds(100, 170, 165, 25);        panelIn.add(toField);        JLabel classLabel = new JLabel("Class: ");        classLabel.setBounds(10, 200, 80, 25);        panelIn.add(classLabel);        JTextField classField = new JTextField();        classField.setBounds(100, 200, 165, 25);        panelIn.add(classField);        JButton saveButton = new JButton("Save");        saveButton.setBounds(10, 230, 80, 25);        saveButton.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e) {                flightNo = flightNoField.getText();                pilotName = pilotNameField.getText();                arrivalTime = arrivalTimeField.getText();                departureTime = departureTimeField.getText();                from = fromField.getText();                to = toField.getText();                flightClass = classField.getText();                saveFlightInfoToFile();                frameIn.dispose(); // Close the window after saving            }        });        panelIn.add(saveButton);        backButton = new JButton("Back");        backButton.setBounds(100, 230, 80, 25);        backButton.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    frameIn.dispose();                    }            });        panelIn.add(backButton);        frameIn.setVisible(true);    }private void removeFlightInfo(int row) {    try {        File file = new File("flights.txt");        File tempFile = new File("temp.txt");        BufferedReader reader = new BufferedReader(new FileReader(file));        BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));        int lineIndex = row * 9; // Each flight info block has 9 lines (including the separator line)        String currentLine;        int lineNumber = 0;        while ((currentLine = reader.readLine()) != null) {            if (lineNumber < lineIndex || lineNumber >= lineIndex + 9) {                writer.write(currentLine);                writer.newLine();            }            lineNumber++;        }        reader.close();        writer.close();        if (!file.delete()) {            throw new IOException("Failed to delete the original file");        }        if (!tempFile.renameTo(file)) {            throw new IOException("Failed to rename the temporary file");        }    } catch (IOException e) {        e.printStackTrace();    }} public void actionPerformed(ActionEvent e) {    if(e.getSource()==backButton){            frame.dispose(); // Close the window when "Back" button is clicked        }}}